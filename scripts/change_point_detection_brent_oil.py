# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M0MHpTFHTa6_qXpRSWAXVSe8KCmYoS3j
"""

from google.colab import drive
drive.mount("/content/drive")

import pandas as pd
import numpy as np
import pymc as pm
import arviz as az
import matplotlib.pyplot as plt

"""## load the data"""

file_path="/content/drive/My Drive/Data/BrentOilPrices.csv"

df=pd.read_csv(file_path)

# change the Date column to a date  time format
df["Date"]=pd.to_datetime(df["Date"], dayfirst=True)
# sort the date
df.sort_values("Date",inplace=True)
df.reset_index(drop=True, inplace=True)

"""## Visualize the Raw Time Series"""

import matplotlib.pyplot as plt
# Step 1.2: Plot Brent Oil Prices over Time
plt.figure(figsize=(14, 5))
plt.plot(df['Date'], df['Price'], label='Brent Oil Price')
plt.title('Brent Oil Price Over Time')
plt.xlabel('Date')
plt.ylabel('Price (USD)')
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()

"""## Prepare an Events Dataset

## Preprocessing for Modeling
"""

# Calculate log returns
df["log_return"]=np.log(df["Price"]/df["Price"].shift(1))
df = df.dropna()

# Inspect log return column
df[['Date', 'log_return']].head()

"""## Plot Log Returns (for Stationarity and Volatility)"""

# Step 1.4: Plot the Log Returns to visualize volatility
plt.figure(figsize=(14, 5))
plt.plot(df['Date'], df['log_return'], color='orange', label='Log Returns')
plt.title('Log Returns of Brent Oil Price')
plt.xlabel('Date')
plt.ylabel('Log Return')
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()

"""## Augmented Dickey-Fuller Test"""

# Step 1.5: Perform ADF Test to check for stationarity
from statsmodels.tsa.stattools import adfuller

result = adfuller(df['log_return'])
print('ADF Statistic:', result[0])
print('p-value:', result[1])

if result[1] < 0.05:
    print("The series is likely stationary (reject H0).")
else:
    print("The series is likely non-stationary (fail to reject H0).")

data = df['log_return'].values[:400]  # 400 points for faster modeling
n = len(data)

"""## Define and Fit the Bayesian Change Point Model"""

# Generate some synthetic data
np.random.seed(42)
n = 100
true_cp = 60
data = np.concatenate([
    np.random.normal(5, 1, true_cp),
    np.random.normal(10, 1, n - true_cp)
])

# Define the model
with pm.Model() as model:
    cp = pm.DiscreteUniform("cp", lower=0, upper=n)

    mean1 = pm.Normal("mean1", mu=0, sigma=10)
    mean2 = pm.Normal("mean2", mu=0, sigma=10)

    sigma = pm.HalfNormal("sigma", sigma=10)

    mu = pm.math.switch(cp >= np.arange(n), mean1, mean2)

    obs = pm.Normal("obs", mu=mu, sigma=sigma, observed=data)

    trace = pm.sample(
        draws=2000,
        tune=1000,
        target_accept=0.95,
        nuts={"max_treedepth": 15},
        progressbar=True
    )

"""## Plot Posterior Distribution of the Change Point"""

# Step 2.4: Plot the posterior distribution of the change point (τ)
az.plot_posterior(trace, var_names=["τ"])
plt.title("Posterior Distribution of Change Point ")
plt.show()

"""## Plot Change Point on Time Series"""

# Step 2.5: Plot detected change point on original log return series
change_point = int(trace.posterior['cp'].mean())

plt.figure(figsize=(14, 5))
plt.plot(df['Date'].values[:n], data, label='Log Returns')
plt.axvline(df['Date'].values[change_point], color='red', linestyle='--', label='Detected Change Point')
plt.title('Detected Change Point in Brent Oil Log Returns')
plt.xlabel('Date')
plt.ylabel('Log Return')
plt.legend()
plt.grid(True)
plt.show()

print("Estimated Change Point Date:", df['Date'].values[change_point])

"""## Bayesian Model with Multiple Change Points"""

import numpy as np
import pymc as pm
import matplotlib.pyplot as plt

# Step 1: Generate synthetic data with two change points
np.random.seed(42)
n = 100
cp1 = 30
cp2 = 70

data = np.concatenate([
    np.random.normal(5, 1, cp1),      # First regime
    np.random.normal(10, 1, cp2 - cp1),  # Second regime
    np.random.normal(15, 1, n - cp2)  # Third regime
])

# Step 2: Define the model with two change points
with pm.Model() as model_two_cp:
    # Priors for change points
    τ1 = pm.DiscreteUniform("τ1", lower=0, upper=n // 2)
    τ2 = pm.DiscreteUniform("τ2", lower=n // 2, upper=n)

    # Priors for means in three segments
    mean1 = pm.Normal("mean1", mu=0, sigma=10)
    mean2 = pm.Normal("mean2", mu=0, sigma=10)
    mean3 = pm.Normal("mean3", mu=0, sigma=10)

    # Prior for common standard deviation
    sigma = pm.HalfNormal("sigma", sigma=10)

    # Define mean depending on change points
    idx = np.arange(n)
    mu = pm.math.switch(
        idx < τ1, mean1,
        pm.math.switch(idx < τ2, mean2, mean3)
    )

    # Likelihood
    obs = pm.Normal("obs", mu=mu, sigma=sigma, observed=data)

    # Sampling
    trace_two_cp = pm.sample(
        draws=2000,
        tune=1000,
        target_accept=0.95,
        nuts={"max_treedepth": 15},
        return_inferencedata=True,
        progressbar=True
    )

"""## Plot the Two Change Points"""

# Step 2.7: Get the posterior means of τ1 and τ2
dates = df['Date'].values[:100]
cp1_index = int(trace_two_cp.posterior['τ1'].mean())
cp2_index = int(trace_two_cp.posterior['τ2'].mean())
cp1_date = dates[cp1_index]
cp2_date = dates[cp2_index]

plt.figure(figsize=(14, 5))
plt.plot(dates, data, label='Log Returns')
plt.axvline(cp1_date, color='orange', linestyle='--', label='Change Point 1')
plt.axvline(cp2_date, color='red', linestyle='--', label='Change Point 2')
plt.title('Two Bayesian Change Points in Brent Oil Log Returns')
plt.xlabel('Date')
plt.ylabel('Log Return')
plt.legend()
plt.grid(True)
plt.show()

print("First Change Point:", cp1_date)
print("Second Change Point:", cp2_date)

"""## Compare Detected Change Points with Real-World Oil Events"""

# Step 2.8: Create event mapping
event_table = pd.DataFrame({
    "Detected Change Point": [cp1_date, cp2_date],
    "Historical Event (approx.)": [
        "COVID-19 pandemic begins / oil demand collapse (early 2020)",
        "Russia-Ukraine war & supply shock (early 2022)"
    ]
})
event_table

"""## Tabulate and Export Change Points"""

# Step 2.9: Export change points with descriptions to CSV (optional)
event_table.to_csv("change_points_summary.csv", index=False)